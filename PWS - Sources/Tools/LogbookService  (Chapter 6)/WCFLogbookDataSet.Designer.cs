//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LogbookService {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator","2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("WCFLogbookDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class WCFLogbookDataSet : System.Data.DataSet {
        
        private EntriesDataTable tableEntries;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public WCFLogbookDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected WCFLogbookDataSet(System.Runtime.Serialization.SerializationInfo info,System.Runtime.Serialization.StreamingContext context) : 
                base(info,context,false) {
            if((this.IsBinarySerialized(info,context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema",typeof(string))));
            if((this.DetermineSchemaSerializationMode(info,context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if((ds.Tables["Entries"] != null)) {
                    base.Tables.Add(new EntriesDataTable(ds.Tables["Entries"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds,false,System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info,context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EntriesDataTable Entries {
            get {
                return this.tableEntries;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            WCFLogbookDataSet cln = ((WCFLogbookDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if((ds.Tables["Entries"] != null)) {
                    base.Tables.Add(new EntriesDataTable(ds.Tables["Entries"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds,false,System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream,null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream),null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableEntries = ((EntriesDataTable)(base.Tables["Entries"]));
            if((initTable == true)) {
                if((this.tableEntries != null)) {
                    this.tableEntries.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "WCFLogbookDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/WCFLogbookDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableEntries = new EntriesDataTable();
            base.Tables.Add(this.tableEntries);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEntries() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender,System.ComponentModel.CollectionChangeEventArgs e) {
            if((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            WCFLogbookDataSet ds = new WCFLogbookDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void EntriesRowChangeEventHandler(object sender,EntriesRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator","2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EntriesDataTable : System.Data.DataTable,System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnMachineName;
            
            private System.Data.DataColumn columnHostName;
            
            private System.Data.DataColumn columnAssemblyName;
            
            private System.Data.DataColumn columnFileName;
            
            private System.Data.DataColumn columnLineNumber;
            
            private System.Data.DataColumn columnTypeName;
            
            private System.Data.DataColumn columnMemberAccessed;
            
            private System.Data.DataColumn columnEntryDate;
            
            private System.Data.DataColumn columnEntryTime;
            
            private System.Data.DataColumn columnExceptionName;
            
            private System.Data.DataColumn columnExceptionMessage;
            
            private System.Data.DataColumn columnProvidedFault;
            
            private System.Data.DataColumn columnProvidedMessage;
            
            private System.Data.DataColumn columnEvent;
            
            private System.Data.DataColumn columnEntryNumber;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntriesDataTable() {
                this.TableName = "Entries";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EntriesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EntriesDataTable(System.Runtime.Serialization.SerializationInfo info,System.Runtime.Serialization.StreamingContext context) : 
                    base(info,context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MachineNameColumn {
                get {
                    return this.columnMachineName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HostNameColumn {
                get {
                    return this.columnHostName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AssemblyNameColumn {
                get {
                    return this.columnAssemblyName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FileNameColumn {
                get {
                    return this.columnFileName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LineNumberColumn {
                get {
                    return this.columnLineNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TypeNameColumn {
                get {
                    return this.columnTypeName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MemberAccessedColumn {
                get {
                    return this.columnMemberAccessed;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EntryDateColumn {
                get {
                    return this.columnEntryDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EntryTimeColumn {
                get {
                    return this.columnEntryTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExceptionNameColumn {
                get {
                    return this.columnExceptionName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExceptionMessageColumn {
                get {
                    return this.columnExceptionMessage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProvidedFaultColumn {
                get {
                    return this.columnProvidedFault;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProvidedMessageColumn {
                get {
                    return this.columnProvidedMessage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EventColumn {
                get {
                    return this.columnEvent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EntryNumberColumn {
                get {
                    return this.columnEntryNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntriesRow this[int index] {
                get {
                    return ((EntriesRow)(this.Rows[index]));
                }
            }
            
            public event EntriesRowChangeEventHandler EntriesRowChanging;
            
            public event EntriesRowChangeEventHandler EntriesRowChanged;
            
            public event EntriesRowChangeEventHandler EntriesRowDeleting;
            
            public event EntriesRowChangeEventHandler EntriesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEntriesRow(EntriesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntriesRow AddEntriesRow(string MachineName,string HostName,string AssemblyName,string FileName,int LineNumber,string TypeName,string MemberAccessed,string EntryDate,string EntryTime,string ExceptionName,string ExceptionMessage,string ProvidedFault,string ProvidedMessage,string Event) {
                EntriesRow rowEntriesRow = ((EntriesRow)(this.NewRow()));
                rowEntriesRow.ItemArray = new object[] {
                        MachineName,
                        HostName,
                        AssemblyName,
                        FileName,
                        LineNumber,
                        TypeName,
                        MemberAccessed,
                        EntryDate,
                        EntryTime,
                        ExceptionName,
                        ExceptionMessage,
                        ProvidedFault,
                        ProvidedMessage,
                        Event,
                        null};
                this.Rows.Add(rowEntriesRow);
                return rowEntriesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntriesRow FindByEntryNumber(int EntryNumber) {
                return ((EntriesRow)(this.Rows.Find(new object[] {
                            EntryNumber})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EntriesDataTable cln = ((EntriesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EntriesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMachineName = base.Columns["MachineName"];
                this.columnHostName = base.Columns["HostName"];
                this.columnAssemblyName = base.Columns["AssemblyName"];
                this.columnFileName = base.Columns["FileName"];
                this.columnLineNumber = base.Columns["LineNumber"];
                this.columnTypeName = base.Columns["TypeName"];
                this.columnMemberAccessed = base.Columns["MemberAccessed"];
                this.columnEntryDate = base.Columns["EntryDate"];
                this.columnEntryTime = base.Columns["EntryTime"];
                this.columnExceptionName = base.Columns["ExceptionName"];
                this.columnExceptionMessage = base.Columns["ExceptionMessage"];
                this.columnProvidedFault = base.Columns["ProvidedFault"];
                this.columnProvidedMessage = base.Columns["ProvidedMessage"];
                this.columnEvent = base.Columns["Event"];
                this.columnEntryNumber = base.Columns["EntryNumber"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMachineName = new System.Data.DataColumn("MachineName",typeof(string),null,System.Data.MappingType.Element);
                base.Columns.Add(this.columnMachineName);
                this.columnHostName = new System.Data.DataColumn("HostName",typeof(string),null,System.Data.MappingType.Element);
                base.Columns.Add(this.columnHostName);
                this.columnAssemblyName = new System.Data.DataColumn("AssemblyName",typeof(string),null,System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssemblyName);
                this.columnFileName = new System.Data.DataColumn("FileName",typeof(string),null,System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileName);
                this.columnLineNumber = new System.Data.DataColumn("LineNumber",typeof(int),null,System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineNumber);
                this.columnTypeName = new System.Data.DataColumn("TypeName",typeof(string),null,System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeName);
                this.columnMemberAccessed = new System.Data.DataColumn("MemberAccessed",typeof(string),null,System.Data.MappingType.Element);
                base.Columns.Add(this.columnMemberAccessed);
                this.columnEntryDate = new System.Data.DataColumn("EntryDate",typeof(string),null,System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntryDate);
                this.columnEntryTime = new System.Data.DataColumn("EntryTime",typeof(string),null,System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntryTime);
                this.columnExceptionName = new System.Data.DataColumn("ExceptionName",typeof(string),null,System.Data.MappingType.Element);
                base.Columns.Add(this.columnExceptionName);
                this.columnExceptionMessage = new System.Data.DataColumn("ExceptionMessage",typeof(string),null,System.Data.MappingType.Element);
                base.Columns.Add(this.columnExceptionMessage);
                this.columnProvidedFault = new System.Data.DataColumn("ProvidedFault",typeof(string),null,System.Data.MappingType.Element);
                base.Columns.Add(this.columnProvidedFault);
                this.columnProvidedMessage = new System.Data.DataColumn("ProvidedMessage",typeof(string),null,System.Data.MappingType.Element);
                base.Columns.Add(this.columnProvidedMessage);
                this.columnEvent = new System.Data.DataColumn("Event",typeof(string),null,System.Data.MappingType.Element);
                base.Columns.Add(this.columnEvent);
                this.columnEntryNumber = new System.Data.DataColumn("EntryNumber",typeof(int),null,System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntryNumber);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1",new System.Data.DataColumn[] {
                                this.columnEntryNumber},true));
                this.columnMachineName.AllowDBNull = false;
                this.columnMachineName.MaxLength = 50;
                this.columnHostName.AllowDBNull = false;
                this.columnHostName.MaxLength = 50;
                this.columnAssemblyName.AllowDBNull = false;
                this.columnAssemblyName.MaxLength = 50;
                this.columnFileName.MaxLength = 50;
                this.columnTypeName.AllowDBNull = false;
                this.columnTypeName.MaxLength = 50;
                this.columnMemberAccessed.AllowDBNull = false;
                this.columnMemberAccessed.MaxLength = 50;
                this.columnEntryDate.AllowDBNull = false;
                this.columnEntryDate.MaxLength = 50;
                this.columnEntryTime.AllowDBNull = false;
                this.columnEntryTime.MaxLength = 50;
                this.columnExceptionName.MaxLength = 100;
                this.columnExceptionMessage.MaxLength = 300;
                this.columnProvidedFault.MaxLength = 100;
                this.columnProvidedMessage.MaxLength = 100;
                this.columnEvent.MaxLength = 100;
                this.columnEntryNumber.AutoIncrement = true;
                this.columnEntryNumber.AllowDBNull = false;
                this.columnEntryNumber.ReadOnly = true;
                this.columnEntryNumber.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntriesRow NewEntriesRow() {
                return ((EntriesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EntriesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EntriesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if((this.EntriesRowChanged != null)) {
                    this.EntriesRowChanged(this,new EntriesRowChangeEvent(((EntriesRow)(e.Row)),e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if((this.EntriesRowChanging != null)) {
                    this.EntriesRowChanging(this,new EntriesRowChangeEvent(((EntriesRow)(e.Row)),e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if((this.EntriesRowDeleted != null)) {
                    this.EntriesRowDeleted(this,new EntriesRowChangeEvent(((EntriesRow)(e.Row)),e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if((this.EntriesRowDeleting != null)) {
                    this.EntriesRowDeleting(this,new EntriesRowChangeEvent(((EntriesRow)(e.Row)),e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEntriesRow(EntriesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                WCFLogbookDataSet ds = new WCFLogbookDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EntriesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator","2.0.0.0")]
        public partial class EntriesRow : System.Data.DataRow {
            
            private EntriesDataTable tableEntries;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EntriesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEntries = ((EntriesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MachineName {
                get {
                    return ((string)(this[this.tableEntries.MachineNameColumn]));
                }
                set {
                    this[this.tableEntries.MachineNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HostName {
                get {
                    return ((string)(this[this.tableEntries.HostNameColumn]));
                }
                set {
                    this[this.tableEntries.HostNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssemblyName {
                get {
                    return ((string)(this[this.tableEntries.AssemblyNameColumn]));
                }
                set {
                    this[this.tableEntries.AssemblyNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FileName {
                get {
                    try {
                        return ((string)(this[this.tableEntries.FileNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FileName\' in table \'Entries\' is DBNull.",e);
                    }
                }
                set {
                    this[this.tableEntries.FileNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LineNumber {
                get {
                    try {
                        return ((int)(this[this.tableEntries.LineNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LineNumber\' in table \'Entries\' is DBNull.",e);
                    }
                }
                set {
                    this[this.tableEntries.LineNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TypeName {
                get {
                    return ((string)(this[this.tableEntries.TypeNameColumn]));
                }
                set {
                    this[this.tableEntries.TypeNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MemberAccessed {
                get {
                    return ((string)(this[this.tableEntries.MemberAccessedColumn]));
                }
                set {
                    this[this.tableEntries.MemberAccessedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EntryDate {
                get {
                    return ((string)(this[this.tableEntries.EntryDateColumn]));
                }
                set {
                    this[this.tableEntries.EntryDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EntryTime {
                get {
                    return ((string)(this[this.tableEntries.EntryTimeColumn]));
                }
                set {
                    this[this.tableEntries.EntryTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExceptionName {
                get {
                    try {
                        return ((string)(this[this.tableEntries.ExceptionNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ExceptionName\' in table \'Entries\' is DBNull.",e);
                    }
                }
                set {
                    this[this.tableEntries.ExceptionNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExceptionMessage {
                get {
                    try {
                        return ((string)(this[this.tableEntries.ExceptionMessageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ExceptionMessage\' in table \'Entries\' is DBNull.",e);
                    }
                }
                set {
                    this[this.tableEntries.ExceptionMessageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProvidedFault {
                get {
                    try {
                        return ((string)(this[this.tableEntries.ProvidedFaultColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProvidedFault\' in table \'Entries\' is DBNull.",e);
                    }
                }
                set {
                    this[this.tableEntries.ProvidedFaultColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProvidedMessage {
                get {
                    try {
                        return ((string)(this[this.tableEntries.ProvidedMessageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProvidedMessage\' in table \'Entries\' is DBNull.",e);
                    }
                }
                set {
                    this[this.tableEntries.ProvidedMessageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Event {
                get {
                    try {
                        return ((string)(this[this.tableEntries.EventColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Event\' in table \'Entries\' is DBNull.",e);
                    }
                }
                set {
                    this[this.tableEntries.EventColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EntryNumber {
                get {
                    return ((int)(this[this.tableEntries.EntryNumberColumn]));
                }
                set {
                    this[this.tableEntries.EntryNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileNameNull() {
                return this.IsNull(this.tableEntries.FileNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileNameNull() {
                this[this.tableEntries.FileNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineNumberNull() {
                return this.IsNull(this.tableEntries.LineNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineNumberNull() {
                this[this.tableEntries.LineNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExceptionNameNull() {
                return this.IsNull(this.tableEntries.ExceptionNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExceptionNameNull() {
                this[this.tableEntries.ExceptionNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExceptionMessageNull() {
                return this.IsNull(this.tableEntries.ExceptionMessageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExceptionMessageNull() {
                this[this.tableEntries.ExceptionMessageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProvidedFaultNull() {
                return this.IsNull(this.tableEntries.ProvidedFaultColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProvidedFaultNull() {
                this[this.tableEntries.ProvidedFaultColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProvidedMessageNull() {
                return this.IsNull(this.tableEntries.ProvidedMessageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProvidedMessageNull() {
                this[this.tableEntries.ProvidedMessageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventNull() {
                return this.IsNull(this.tableEntries.EventColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventNull() {
                this[this.tableEntries.EventColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator","2.0.0.0")]
        public class EntriesRowChangeEvent : System.EventArgs {
            
            private EntriesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntriesRowChangeEvent(EntriesRow row,System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntriesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace LogbookService.WCFLogbookDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator","2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner,Microsoft.VSDesigner" +
        ",Version=8.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EntriesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EntriesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Entries";
            tableMapping.ColumnMappings.Add("MachineName","MachineName");
            tableMapping.ColumnMappings.Add("HostName","HostName");
            tableMapping.ColumnMappings.Add("AssemblyName","AssemblyName");
            tableMapping.ColumnMappings.Add("FileName","FileName");
            tableMapping.ColumnMappings.Add("LineNumber","LineNumber");
            tableMapping.ColumnMappings.Add("TypeName","TypeName");
            tableMapping.ColumnMappings.Add("MemberAccessed","MemberAccessed");
            tableMapping.ColumnMappings.Add("EntryDate","EntryDate");
            tableMapping.ColumnMappings.Add("EntryTime","EntryTime");
            tableMapping.ColumnMappings.Add("ExceptionName","ExceptionName");
            tableMapping.ColumnMappings.Add("ExceptionMessage","ExceptionMessage");
            tableMapping.ColumnMappings.Add("ProvidedFault","ProvidedFault");
            tableMapping.ColumnMappings.Add("ProvidedMessage","ProvidedMessage");
            tableMapping.ColumnMappings.Add("Event","Event");
            tableMapping.ColumnMappings.Add("EntryNumber","EntryNumber");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Entries] WHERE (([MachineName] = @Original_MachineName) AND ([HostName] = @Original_HostName) AND ([AssemblyName] = @Original_AssemblyName) AND ((@IsNull_FileName = 1 AND [FileName] IS NULL) OR ([FileName] = @Original_FileName)) AND ((@IsNull_LineNumber = 1 AND [LineNumber] IS NULL) OR ([LineNumber] = @Original_LineNumber)) AND ([TypeName] = @Original_TypeName) AND ([MemberAccessed] = @Original_MemberAccessed) AND ([EntryDate] = @Original_EntryDate) AND ([EntryTime] = @Original_EntryTime) AND ((@IsNull_ExceptionName = 1 AND [ExceptionName] IS NULL) OR ([ExceptionName] = @Original_ExceptionName)) AND ((@IsNull_ExceptionMessage = 1 AND [ExceptionMessage] IS NULL) OR ([ExceptionMessage] = @Original_ExceptionMessage)) AND ((@IsNull_ProvidedFault = 1 AND [ProvidedFault] IS NULL) OR ([ProvidedFault] = @Original_ProvidedFault)) AND ((@IsNull_ProvidedMessage = 1 AND [ProvidedMessage] IS NULL) OR ([ProvidedMessage] = @Original_ProvidedMessage)) AND ((@IsNull_Event = 1 AND [Event] IS NULL) OR ([Event] = @Original_Event)) AND ([EntryNumber] = @Original_EntryNumber))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MachineName",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"MachineName",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_HostName",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"HostName",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AssemblyName",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"AssemblyName",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_FileName",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"FileName",System.Data.DataRowVersion.Original,true,null,"","",""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FileName",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"FileName",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_LineNumber",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"LineNumber",System.Data.DataRowVersion.Original,true,null,"","",""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LineNumber",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"LineNumber",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TypeName",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"TypeName",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MemberAccessed",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"MemberAccessed",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EntryDate",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"EntryDate",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EntryTime",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"EntryTime",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ExceptionName",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"ExceptionName",System.Data.DataRowVersion.Original,true,null,"","",""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ExceptionName",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"ExceptionName",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ExceptionMessage",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"ExceptionMessage",System.Data.DataRowVersion.Original,true,null,"","",""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ExceptionMessage",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"ExceptionMessage",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ProvidedFault",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"ProvidedFault",System.Data.DataRowVersion.Original,true,null,"","",""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ProvidedFault",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"ProvidedFault",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ProvidedMessage",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"ProvidedMessage",System.Data.DataRowVersion.Original,true,null,"","",""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ProvidedMessage",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"ProvidedMessage",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Event",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"Event",System.Data.DataRowVersion.Original,true,null,"","",""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Event",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"Event",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EntryNumber",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"EntryNumber",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Entries] ([MachineName],[HostName],[AssemblyName],[FileName],[LineNumber],[TypeName],[MemberAccessed],[EntryDate],[EntryTime],[ExceptionName],[ExceptionMessage],[ProvidedFault],[ProvidedMessage],[Event]) VALUES (@MachineName,@HostName,@AssemblyName,@FileName,@LineNumber,@TypeName,@MemberAccessed,@EntryDate,@EntryTime,@ExceptionName,@ExceptionMessage,@ProvidedFault,@ProvidedMessage,@Event);
SELECT MachineName,HostName,AssemblyName,FileName,LineNumber,TypeName,MemberAccessed,EntryDate,EntryTime,ExceptionName,ExceptionMessage,ProvidedFault,ProvidedMessage,Event,EntryNumber FROM Entries WHERE (EntryNumber = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MachineName",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"MachineName",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@HostName",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"HostName",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AssemblyName",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"AssemblyName",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FileName",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"FileName",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LineNumber",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"LineNumber",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TypeName",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"TypeName",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MemberAccessed",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"MemberAccessed",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EntryDate",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"EntryDate",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EntryTime",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"EntryTime",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExceptionName",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"ExceptionName",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExceptionMessage",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"ExceptionMessage",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ProvidedFault",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"ProvidedFault",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ProvidedMessage",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"ProvidedMessage",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Event",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"Event",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Entries] SET [MachineName] = @MachineName,[HostName] = @HostName," +
                "[AssemblyName] = @AssemblyName,[FileName] = @FileName,[LineNumber] = @LineNumb" +
                "er,[TypeName] = @TypeName,[MemberAccessed] = @MemberAccessed,[EntryDate] = @E" +
                "ntryDate,[EntryTime] = @EntryTime,[ExceptionName] = @ExceptionName,[Exception" +
                "Message] = @ExceptionMessage,[ProvidedFault] = @ProvidedFault,[ProvidedMessage" +
                "] = @ProvidedMessage,[Event] = @Event WHERE (([MachineName] = @Original_Machine" +
                "Name) AND ([HostName] = @Original_HostName) AND ([AssemblyName] = @Original_Asse" +
                "mblyName) AND ((@IsNull_FileName = 1 AND [FileName] IS NULL) OR ([FileName] = @O" +
                "riginal_FileName)) AND ((@IsNull_LineNumber = 1 AND [LineNumber] IS NULL) OR ([L" +
                "ineNumber] = @Original_LineNumber)) AND ([TypeName] = @Original_TypeName) AND ([" +
                "MemberAccessed] = @Original_MemberAccessed) AND ([EntryDate] = @Original_EntryDa" +
                "te) AND ([EntryTime] = @Original_EntryTime) AND ((@IsNull_ExceptionName = 1 AND " +
                "[ExceptionName] IS NULL) OR ([ExceptionName] = @Original_ExceptionName)) AND ((@" +
                "IsNull_ExceptionMessage = 1 AND [ExceptionMessage] IS NULL) OR ([ExceptionMessag" +
                "e] = @Original_ExceptionMessage)) AND ((@IsNull_ProvidedFault = 1 AND [ProvidedF" +
                "ault] IS NULL) OR ([ProvidedFault] = @Original_ProvidedFault)) AND ((@IsNull_Pro" +
                "videdMessage = 1 AND [ProvidedMessage] IS NULL) OR ([ProvidedMessage] = @Origina" +
                "l_ProvidedMessage)) AND ((@IsNull_Event = 1 AND [Event] IS NULL) OR ([Event] = @" +
                "Original_Event)) AND ([EntryNumber] = @Original_EntryNumber));\r\nSELECT MachineNa" +
                "me,HostName,AssemblyName,FileName,LineNumber,TypeName,MemberAccessed,Entr" +
                "yDate,EntryTime,ExceptionName,ExceptionMessage,ProvidedFault,ProvidedMessag" +
                "e,Event,EntryNumber FROM Entries WHERE (EntryNumber = @EntryNumber)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MachineName",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"MachineName",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@HostName",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"HostName",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AssemblyName",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"AssemblyName",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FileName",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"FileName",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LineNumber",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"LineNumber",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TypeName",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"TypeName",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MemberAccessed",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"MemberAccessed",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EntryDate",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"EntryDate",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EntryTime",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"EntryTime",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExceptionName",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"ExceptionName",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExceptionMessage",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"ExceptionMessage",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ProvidedFault",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"ProvidedFault",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ProvidedMessage",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"ProvidedMessage",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Event",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"Event",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MachineName",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"MachineName",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_HostName",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"HostName",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AssemblyName",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"AssemblyName",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_FileName",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"FileName",System.Data.DataRowVersion.Original,true,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FileName",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"FileName",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_LineNumber",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"LineNumber",System.Data.DataRowVersion.Original,true,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LineNumber",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"LineNumber",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TypeName",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"TypeName",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MemberAccessed",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"MemberAccessed",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EntryDate",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"EntryDate",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EntryTime",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"EntryTime",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ExceptionName",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"ExceptionName",System.Data.DataRowVersion.Original,true,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ExceptionName",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"ExceptionName",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ExceptionMessage",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"ExceptionMessage",System.Data.DataRowVersion.Original,true,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ExceptionMessage",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"ExceptionMessage",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ProvidedFault",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"ProvidedFault",System.Data.DataRowVersion.Original,true,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ProvidedFault",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"ProvidedFault",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ProvidedMessage",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"ProvidedMessage",System.Data.DataRowVersion.Original,true,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ProvidedMessage",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"ProvidedMessage",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Event",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"Event",System.Data.DataRowVersion.Original,true,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Event",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"Event",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EntryNumber",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"EntryNumber",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EntryNumber",System.Data.SqlDbType.Int,4,System.Data.ParameterDirection.Input,0,0,"EntryNumber",System.Data.DataRowVersion.Current,false,null,"","",""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LogbookService.Properties.Settings.Default.WCFLogbookConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT MachineName,HostName,AssemblyName,FileName,LineNumber,TypeName,Membe" +
                "rAccessed,EntryDate,EntryTime,ExceptionName,ExceptionMessage,ProvidedFault," +
                " ProvidedMessage,Event,EntryNumber FROM dbo.Entries";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.ClearAll";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE",System.Data.SqlDbType.Int,4,System.Data.ParameterDirection.ReturnValue,10,0,null,System.Data.DataRowVersion.Current,false,null,"","",""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill,true)]
        public virtual int Fill(WCFLogbookDataSet.EntriesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select,true)]
        public virtual WCFLogbookDataSet.EntriesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            WCFLogbookDataSet.EntriesDataTable dataTable = new WCFLogbookDataSet.EntriesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(WCFLogbookDataSet.EntriesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(WCFLogbookDataSet dataSet) {
            return this.Adapter.Update(dataSet,"Entries");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete,true)]
        public virtual int Delete(string Original_MachineName,string Original_HostName,string Original_AssemblyName,string Original_FileName,System.Nullable<int> Original_LineNumber,string Original_TypeName,string Original_MemberAccessed,string Original_EntryDate,string Original_EntryTime,string Original_ExceptionName,string Original_ExceptionMessage,string Original_ProvidedFault,string Original_ProvidedMessage,string Original_Event,int Original_EntryNumber) {
            if((Original_MachineName == null)) {
                throw new System.ArgumentNullException("Original_MachineName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_MachineName));
            }
            if((Original_HostName == null)) {
                throw new System.ArgumentNullException("Original_HostName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_HostName));
            }
            if((Original_AssemblyName == null)) {
                throw new System.ArgumentNullException("Original_AssemblyName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_AssemblyName));
            }
            if((Original_FileName == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_FileName));
            }
            if((Original_LineNumber.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_LineNumber.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if((Original_TypeName == null)) {
                throw new System.ArgumentNullException("Original_TypeName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_TypeName));
            }
            if((Original_MemberAccessed == null)) {
                throw new System.ArgumentNullException("Original_MemberAccessed");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_MemberAccessed));
            }
            if((Original_EntryDate == null)) {
                throw new System.ArgumentNullException("Original_EntryDate");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_EntryDate));
            }
            if((Original_EntryTime == null)) {
                throw new System.ArgumentNullException("Original_EntryTime");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_EntryTime));
            }
            if((Original_ExceptionName == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_ExceptionName));
            }
            if((Original_ExceptionMessage == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_ExceptionMessage));
            }
            if((Original_ProvidedFault == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_ProvidedFault));
            }
            if((Original_ProvidedMessage == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_ProvidedMessage));
            }
            if((Original_Event == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_Event));
            }
            this.Adapter.DeleteCommand.Parameters[21].Value = ((int)(Original_EntryNumber));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if(((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert,true)]
        public virtual int Insert(string MachineName,string HostName,string AssemblyName,string FileName,System.Nullable<int> LineNumber,string TypeName,string MemberAccessed,string EntryDate,string EntryTime,string ExceptionName,string ExceptionMessage,string ProvidedFault,string ProvidedMessage,string Event) {
            if((MachineName == null)) {
                throw new System.ArgumentNullException("MachineName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(MachineName));
            }
            if((HostName == null)) {
                throw new System.ArgumentNullException("HostName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(HostName));
            }
            if((AssemblyName == null)) {
                throw new System.ArgumentNullException("AssemblyName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(AssemblyName));
            }
            if((FileName == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(FileName));
            }
            if((LineNumber.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(LineNumber.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if((TypeName == null)) {
                throw new System.ArgumentNullException("TypeName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(TypeName));
            }
            if((MemberAccessed == null)) {
                throw new System.ArgumentNullException("MemberAccessed");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(MemberAccessed));
            }
            if((EntryDate == null)) {
                throw new System.ArgumentNullException("EntryDate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(EntryDate));
            }
            if((EntryTime == null)) {
                throw new System.ArgumentNullException("EntryTime");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(EntryTime));
            }
            if((ExceptionName == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(ExceptionName));
            }
            if((ExceptionMessage == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(ExceptionMessage));
            }
            if((ProvidedFault == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(ProvidedFault));
            }
            if((ProvidedMessage == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(ProvidedMessage));
            }
            if((Event == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(Event));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if(((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update,true)]
        public virtual int Update(
                    string MachineName,
                    string HostName,
                    string AssemblyName,
                    string FileName,
                    System.Nullable<int> LineNumber,
                    string TypeName,
                    string MemberAccessed,
                    string EntryDate,
                    string EntryTime,
                    string ExceptionName,
                    string ExceptionMessage,
                    string ProvidedFault,
                    string ProvidedMessage,
                    string Event,
                    string Original_MachineName,
                    string Original_HostName,
                    string Original_AssemblyName,
                    string Original_FileName,
                    System.Nullable<int> Original_LineNumber,
                    string Original_TypeName,
                    string Original_MemberAccessed,
                    string Original_EntryDate,
                    string Original_EntryTime,
                    string Original_ExceptionName,
                    string Original_ExceptionMessage,
                    string Original_ProvidedFault,
                    string Original_ProvidedMessage,
                    string Original_Event,
                    int Original_EntryNumber,
                    int EntryNumber) {
            if((MachineName == null)) {
                throw new System.ArgumentNullException("MachineName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(MachineName));
            }
            if((HostName == null)) {
                throw new System.ArgumentNullException("HostName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(HostName));
            }
            if((AssemblyName == null)) {
                throw new System.ArgumentNullException("AssemblyName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(AssemblyName));
            }
            if((FileName == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(FileName));
            }
            if((LineNumber.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(LineNumber.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if((TypeName == null)) {
                throw new System.ArgumentNullException("TypeName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(TypeName));
            }
            if((MemberAccessed == null)) {
                throw new System.ArgumentNullException("MemberAccessed");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(MemberAccessed));
            }
            if((EntryDate == null)) {
                throw new System.ArgumentNullException("EntryDate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(EntryDate));
            }
            if((EntryTime == null)) {
                throw new System.ArgumentNullException("EntryTime");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(EntryTime));
            }
            if((ExceptionName == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(ExceptionName));
            }
            if((ExceptionMessage == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(ExceptionMessage));
            }
            if((ProvidedFault == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(ProvidedFault));
            }
            if((ProvidedMessage == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(ProvidedMessage));
            }
            if((Event == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Event));
            }
            if((Original_MachineName == null)) {
                throw new System.ArgumentNullException("Original_MachineName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_MachineName));
            }
            if((Original_HostName == null)) {
                throw new System.ArgumentNullException("Original_HostName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_HostName));
            }
            if((Original_AssemblyName == null)) {
                throw new System.ArgumentNullException("Original_AssemblyName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_AssemblyName));
            }
            if((Original_FileName == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_FileName));
            }
            if((Original_LineNumber.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Original_LineNumber.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = System.DBNull.Value;
            }
            if((Original_TypeName == null)) {
                throw new System.ArgumentNullException("Original_TypeName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_TypeName));
            }
            if((Original_MemberAccessed == null)) {
                throw new System.ArgumentNullException("Original_MemberAccessed");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_MemberAccessed));
            }
            if((Original_EntryDate == null)) {
                throw new System.ArgumentNullException("Original_EntryDate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_EntryDate));
            }
            if((Original_EntryTime == null)) {
                throw new System.ArgumentNullException("Original_EntryTime");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_EntryTime));
            }
            if((Original_ExceptionName == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_ExceptionName));
            }
            if((Original_ExceptionMessage == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_ExceptionMessage));
            }
            if((Original_ProvidedFault == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_ProvidedFault));
            }
            if((Original_ProvidedMessage == null)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Original_ProvidedMessage));
            }
            if((Original_Event == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_Event));
            }
            this.Adapter.UpdateCommand.Parameters[35].Value = ((int)(Original_EntryNumber));
            this.Adapter.UpdateCommand.Parameters[36].Value = ((int)(EntryNumber));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if(((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete,false)]
        public virtual int ClearAll() {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if(((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
}

#pragma warning restore 1591